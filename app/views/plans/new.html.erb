      <h4>避難計画登録</h4>
      <div id="map"></div>
      <form class="mb-5" onsubmit="return false;">
        <input type="text" id="address" placeholder="  地点を入力してください" style="width:600px; height:35px;"><br/>
        <button type="button" value="検索" id="map_button" class="btn-md btn-secondary">検索</button>
      </form>
          <p>この場所は<br>
            標高 <input type="text" id="elev" value="">M<br>
            場所を入力すると標高情報が取得できます。</p>
        <form id="distance_form">
          <div class="form-group">
            <label>出発地:
            </label>
            <input id="from_places" class="form-control" placeholder="地点を入力してください"/>
            <input id="origin" type="hidden" name="origin" required="required"/>
          <div class="form-group">
            <label>避難先:
            </label>
            <input id="to_places" class="form-control" placeholder="地点を入力してください"/>
            <input id="destination" type="hidden" name="destination" required="required"/>
          </div>
          <input type="submit" value="計算" class="btn btn-success mb-4"/>
        </form>

        <form id="memo-form" onsubmit="return false;">
          <input id="memo_field" placeholder=" メモを入力してください" style="width:690px; height:45px;">
        <div id="result">
          <ul class="list-group">
            <li class="list-group-item d-flex justify-content-between align-items-center">
              距離(m):
              <span id="in_meter" class="badge badge-primary badge-pill"></span>
            </li>
            <li class="list-group-item d-flex justify-content-between align-items-center">
              時間(分):
              <span id="duration_text" class="badge badge-primary badge-pill"></span>
            </li>
            <li class="list-group-item d-flex justify-content-between align-items-center">
              出発地住所:
              <span id="from" class="badge badge-primary badge-pill"></span>
            </li>
            <li class="list-group-item d-flex justify-content-between align-items-center">
              避難先住所:
              <span id="to" class="badge badge-primary badge-pill"></span>
            </li>
          </ul>
        </div>
        <input type="submit" value="登録" class="registration btn btn-primary mt-3"/>
        </form>

    <script>
    var getMap = (function() {
      function codeAddress(address) {
        // google.maps.Geocoder()コンストラクタのインスタンスを生成
        var geocoder = new google.maps.Geocoder();
    
        // 地図表示に関するオプション
        var mapOptions = {
          zoom: 16,
          center: { lat: 35.662, lng: 139.703 },
          mapTypeId: "roadmap"
        };
    
        // 地図を表示させるインスタンスを生成
        var map = new google.maps.Map(document.getElementById("map"), mapOptions);
        console.log(map);
        
        //マーカー変数用意
        var marker;

        // geocoder.geocode()メソッドを実行 
        geocoder.geocode( { 'address': address}, function(results, status) {
          // ジオコーディングが成功した場合
          if (status === 'OK') {
            
            // 変換した緯度・経度情報を地図の中心に表示
            map.setCenter(results[0].geometry.location);
            
            //☆表示している地図上の緯度経度
            var latlng = results[0].geometry.location
            marker = new google.maps.Marker({ // マーカーの追加
              position: latlng, // マーカーを立てる位置を指定
              map: map // マーカーを立てる地図を指定
            });

            function getElevation(latlng) {

              // 要素が１つでも配列に…。
              var locations = [latlng]

              // ElevationServiceのコンストラクタ
              var elevation = new google.maps.ElevationService();

              // リクエストを発行
              elevation.getElevationForLocations({
                locations: locations
              }, function(results, status) {
                if (status === 'OK') {
                  if (results[0].elevation) {

                    // 標高ゲット！
                    var elevation = results[0].elevation;
                    console.log(elevation);
                    document.getElementById('elev').value = Math.floor(elevation);
                    }
              } else {
                    alert("標高情報を取得できませんでした");
                  }
            });
          }

          getElevation(latlng);

          // ジオコーディングが成功しなかった場合
          } else {
            console.log('Geocode was not successful for the following reason: ' + status);
          }
        });
        
        // マップをクリックで位置変更
        map.addListener('click', function(e) {
          getClickLatLng(e.latLng, map);
        });
        function getClickLatLng(lat_lng, map) {
          
          //☆表示している地図上の緯度経度
          document.getElementById('lat').value=lat_lng.lat();
          document.getElementById('lng').value=lat_lng.lng();
        
          // 座標の中心をずらす
          map.panTo(lat_lng);
        }
      }
      
      //inputのvalueで検索して地図を表示
      return {
        getAddress: function() {
          // ボタンに指定したid要素を取得
          var button = document.getElementById("map_button");
          // ボタンが押された時の処理
          button.onclick = function() {
            // フォームに入力された住所情報を取得
            var address = document.getElementById("address").value;
            // 取得した住所を引数に指定してcodeAddress()関数を実行
            codeAddress(address);
          }
          
          //読み込まれたときに地図を表示
          window.onload = function(){
            // フォームに入力された住所情報を取得
            var address = document.getElementById("address").value;
            // 取得した住所を引数に指定してcodeAddress()関数を実行
            codeAddress(address);
          }
        }
      };
    })();
    getMap.getAddress();

    $(document).ready(function() {
      // 入力フォームを取得して、同名の変数に自動補完機能を付与
      var from_places = new google.maps.places.Autocomplete(
        document.getElementById("from_places")
      );
      var to_places = new google.maps.places.Autocomplete(
        document.getElementById("to_places")
      );
      // フォームに入力されたら文字列を取得、整形して、jqueryで値をフォームに渡す
      google.maps.event.addListener(from_places, "place_changed", function() {
        var from_place = from_places.getPlace();
        var from_address = from_place.formatted_address;
        $("#origin").val(from_address);
      });
      google.maps.event.addListener(to_places, "place_changed", function() {
        var to_place = to_places.getPlace();
        var to_address = to_place.formatted_address;
        $("#destination").val(to_address);
      });


      let departure;
      let shelter;
      let distance;
      let duration;

    // 距離と時間を計算する関数を定義。上記でフォームに渡した値を、変数に代入
    function calculateDistance() {
      var origin = $("#origin").val();
      var destination = $("#destination").val();
      // DistanceMatrixに対して、距離と時間の計算に必要なパラメーターを渡す
      var service = new google.maps.DistanceMatrixService();
      service.getDistanceMatrix(
        {
          origins: [origin],
          destinations: [destination],
          travelMode: google.maps.TravelMode.WALKING,
          unitSystem: google.maps.UnitSystem.metric,
          avoidHighways: true
        },
        // レスポンスをもとに、実行されるcallback関数を呼び出す
        callback1
      );
      // Directionsに対して、2地点間のルート表示に必要なパラメーターを渡す
      var directionsService = new google.maps.DirectionsService();
      directionsService.route(
        {
          origin: origin,
          destination: destination,
          travelMode: google.maps.TravelMode.WALKING
        },
        // 本来はcallbackで呼び出すけど、ここではベタ打ち
        function(response, status) {
          var map = new google.maps.Map(document.getElementById("map"));

          var directionsRenderer = new google.maps.DirectionsRenderer();
          directionsRenderer.setMap(map);
          directionsRenderer.setDirections(response);
        }
      );

      function callback1(response, status) {
        if (status != google.maps.DistanceMatrixStatus.OK) {
          $("#result").html(err);
        } else {
          departure = response.originAddresses[0];
          shelter = response.destinationAddresses[0];
          if (response.rows[0].elements[0].status === "ZERO_RESULTS") {
            $("#result").html(
              "Better get on a plane. There are no roads between " +
                departure +
                " and " +
                shelter
            );
          } else {
            // 変数の取得方法をdirection APIに合わせた形に修正
            distance = response.rows[0].elements[0].distance;
            duration = response.rows[0].elements[0].duration;
            var distance_in_meter = distance.value;
            var duration_text = duration.text;
            $("#in_meter").text(distance_in_meter.toFixed(2));
            $("#duration_text").text(duration_text);
            $("#from").text(departure);
            $("#to").text(shelter);
          }
        }
      }
      function callback2(response, status) {
        function test(response, status) {
          // 地図を表示させるインスタンスを生成
        }
      }
    }

    $("#distance_form").submit(function(e) {
      e.preventDefault();
      calculateDistance();
      // var service = new google.maps.DistanceMatrixService();
      // service.route(result, function(result, status) {
      //   //ステータスがOKの場合、
      //   if (status === "OK") {
      //     // distanceMatrixRenderer.setDistanceMatrix(result);
      //     //取得したルート（結果：result）をセット
      //   } else {
      //     alert("取得できませんでした：" + status);
      //   }
      //
    });

    $(".registration").click(function(e) {
      // var user = User.getCur rentUser();
      var memo_field = $('#memo_field');
      var memo = memo_field.val();
      console.log("登録ボタンが押されました");
      $.ajax({
        type: "POST",
        url: "/plans",
        data: {
          plan: {
            <% if user_signed_in? %>
              user_id: <%= current_user.id %>,
            <% end %>
              departure: departure,
              shelter: shelter,
              distance: distance.value,
              duration: duration.value,
              memo: memo
          }
        },
        datatype: "json"
      })
        .done(function(data) {
          window.location = "<%= plans_path %>";
        })
        .fail(function() {
          alert("登録に失敗しました");
        });
    });
  });
    </script>
